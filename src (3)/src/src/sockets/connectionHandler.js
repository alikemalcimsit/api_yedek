// KullanÄ±cÄ±nÄ±n alt rollerindeki ID'leri getiren fonksiyon
// GerÃ§ek uygulamada bu database'den gelecek
const getSubordinateIds = (userSystemId, userRole) => {
    // Ã–rnek hiyerarÅŸi: Admin(2) -> Agent(4), SuperAdmin -> herkes
    const hierarchy = {
        2: [4, 5, 6], // Admin 2, Agent'lar 4,5,6'yÄ± yÃ¶netir
        3: [7, 8],    // Admin 3, Agent'lar 7,8'i yÃ¶netir
        // super_admin tÃ¼m kullanÄ±cÄ±larÄ± gÃ¶rebilir
    };
    
    if (userRole === 'super_admin') {
        // SuperAdmin tÃ¼m kullanÄ±cÄ±larÄ± gÃ¶rebilir
        return [2, 3, 4, 5, 6, 7, 8]; // Ã–rnek tÃ¼m kullanÄ±cÄ± ID'leri
    }
    
    return hierarchy[userSystemId] || [];
};

export const setupConnectionHandlers = (io) => {
    io.on('connection', (socket) => {
        console.log('ğŸ”Œ Socket baÄŸlantÄ±sÄ± - ID:', socket.id);

        // Socket'e kullanÄ±cÄ± bilgisini kaydet
        socket.userSystemId = null;
        socket.userRole = null;

        // User System room'a katÄ±lma (ChatMessageHandler'dan gelen mesajlar iÃ§in)
        socket.on('join-user-room', (data) => {
            const { userSystemId, userPatientId, userRole } = data;
            
            // Socket'e kullanÄ±cÄ± ID'sini kaydet
            socket.userSystemId = userSystemId;
            socket.userRole = userRole || 'user';
            
            // Ã–nce kendi room'una katÄ±l
            const userRoomName = `user_system_${userSystemId}`;
            socket.join(userRoomName);
            
            let joinedRooms = [userRoomName];
            
            // EÄŸer admin ise, alt rollerin room'larÄ±na da katÄ±l
            if (userRole === 'admin' || userRole === 'super_admin') {
                const subordinateIds = getSubordinateIds(userSystemId, userRole);
                
                subordinateIds.forEach(subordinateId => {
                    const subordinateRoom = `user_system_${subordinateId}`;
                    socket.join(subordinateRoom);
                    joinedRooms.push(subordinateRoom);
                });
            }
            
            console.log(`ğŸ‘¤ KullanÄ±cÄ± ${userSystemId} (${userRole}) katÄ±ldÄ±ÄŸÄ± room'lar:`, joinedRooms);
            
            // KullanÄ±cÄ±ya onay gÃ¶nder
            socket.emit('joined-user-room', {
                success: true,
                rooms: joinedRooms,
                userSystemId: userSystemId,
                userRole: userRole,
                socketId: socket.id
            });
        });

        // User System room'dan ayrÄ±lma
        socket.on('leave-user-room', (data) => {
            const { userSystemId } = data;
            
            // TÃ¼m room'lardan ayrÄ±l (kendi + alt roller)
            const userRole = socket.userRole;
            const userRoomName = `user_system_${userSystemId}`;
            
            socket.leave(userRoomName);
            
            if (userRole === 'admin' || userRole === 'super_admin') {
                const subordinateIds = getSubordinateIds(userSystemId, userRole);
                subordinateIds.forEach(subordinateId => {
                    socket.leave(`user_system_${subordinateId}`);
                });
            }
            
            console.log(`ğŸ‘¤ KullanÄ±cÄ± ${userSystemId} tÃ¼m room'lardan ayrÄ±ldÄ±`);
        });
        
        // Chat room'a katÄ±lma
        socket.on('join-chat-room', (data) => {
            const { userId, chatId } = data;
            const roomName = `chat_${chatId}`;
            
            socket.join(roomName);
            console.log(`KullanÄ±cÄ± ${userId} chat odasÄ±na katÄ±ldÄ±: ${roomName}`);
            
            // KullanÄ±cÄ±ya onay gÃ¶nder
            socket.emit('joined-room', {
                success: true,
                room: roomName,
                userId: userId
            });
        });

        // Chat room'dan ayrÄ±lma
        socket.on('leave-chat-room', (data) => {
            const { userId, chatId } = data;
            const roomName = `chat_${chatId}`;
            
            socket.leave(roomName);
            console.log(`KullanÄ±cÄ± ${userId} chat odasÄ±ndan ayrÄ±ldÄ±: ${roomName}`);
        });

        // KullanÄ±cÄ±dan kullanÄ±cÄ±ya mesaj gÃ¶nderme
        socket.on('send-message', (data) => {
            const { text, targetUserSystemId, chatId } = data;
            
            // GÃ¶nderen kullanÄ±cÄ±nÄ±n ID'sini socket'ten al
            const fromUserSystemId = socket.userSystemId;
            
            if (!text || !targetUserSystemId || !fromUserSystemId) {
                socket.emit('error', { 
                    message: 'GeÃ§ersiz mesaj verisi',
                    missing: {
                        text: !text,
                        targetUserSystemId: !targetUserSystemId,
                        fromUserSystemId: !fromUserSystemId
                    }
                });
                return;
            }

            const targetRoomName = `user_system_${targetUserSystemId}`;
            
            // Mesaj verisini hazÄ±rla
            const messageData = {
                messageId: Date.now(), // GeÃ§ici ID
                userSystemId: targetUserSystemId, // Hedef kullanÄ±cÄ± ID'si
                fromUserSystemId: fromUserSystemId, // GÃ¶nderen kullanÄ±cÄ± ID'si
                text: text,
                authorName: `User ${fromUserSystemId}`, // GÃ¶nderen kullanÄ±cÄ± adÄ±
                dateTime: new Date().toISOString(),
                chatId: chatId || 1,
                type: 'user_message',
                timestamp: new Date().toISOString()
            };

            // Hedef kullanÄ±cÄ±nÄ±n room'una mesajÄ± gÃ¶nder
            io.to(targetRoomName).emit('new-chat-message', messageData);
            
            // GÃ¶nderen kullanÄ±cÄ±ya onay gÃ¶nder
            socket.emit('message-sent', {
                success: true,
                targetUserSystemId: targetUserSystemId,
                fromUserSystemId: fromUserSystemId,
                messageId: messageData.messageId,
                timestamp: new Date().toISOString()
            });

            console.log(`Mesaj gÃ¶nderildi - GÃ¶nderen: ${fromUserSystemId}, Hedef: ${targetUserSystemId}, Room: ${targetRoomName}`);
        });

        // Mesaj okundu iÅŸaretleme
        socket.on('mark-message-read', (data) => {
            const { messageId, userSystemId } = data;
            
            // Mesaj okundu bilgisini yayÄ±nla
            io.to(`user_system_${userSystemId}`).emit('message-read-status', {
                messageId,
                readAt: new Date().toISOString(),
                readBy: userSystemId
            });
        });

        // Disconnect handler
        socket.on('disconnect', () => {
            const userSystemId = socket.userSystemId;
            if (userSystemId) {
                console.log(`Socket ayrÄ±ldÄ± - ID: ${socket.id}, UserSystemId: ${userSystemId}`);
                // Room'dan otomatik olarak ayrÄ±lÄ±r, manuel iÅŸlem gerekmez
            } else {
                console.log(`Socket ayrÄ±ldÄ± - ID: ${socket.id} (UserSystemId kayÄ±tlÄ± deÄŸil)`);
            }
        });
    });
};